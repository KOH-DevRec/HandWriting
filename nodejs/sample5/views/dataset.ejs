<html>
<head>
  <meta charset="utf-8" />
  <style>
  </style>
  <script src="https://code.createjs.com/1.0.0/createjs.min.js"></script>
  <script>
    window.addEventListener("load", init);
    function init() {
      // Stageオブジェクトを作成。表示リストのルートになります。
      var stage = new createjs.Stage("myCanvas");
      var draw_history_X = [];
      var draw_history_Y = [];
      var message_x = [];
      var message_y = [];
      var history_count = 0;
      var i = 0;
      var csv="";
      var draw_data = []
      var image1 = new Image();
      image1.src = "moji_img/<%= hiragana%>.png";
      postForm2("name_id","<%=name_id%>");
      postForm2("moji_id",<%=moji_id%>)
      postForm2("hiragana","<%=hiragana%>");
      var ctx = document.getElementById("myCanvas").getContext("2d");
      ctx.drawImage(image1, 0, 0);
      image1.src = "moji_img/<%= hiragana%>.png";
      // タッチイベントが有効なブラウザの場合、
      // CreateJSでタッチイベントを扱えるようにする
      if (createjs.Touch.isSupported()) {
        createjs.Touch.enable(stage);
      }

      var shape = new createjs.Shape(); // シェイプを作成
      stage.addChild(shape); // ステージに配置

      // ステージ上でマウスボタンを押した時のイベント設定
      stage.addEventListener("stagemousedown", handleDown);

      // マウスを押した時に実行される
      function handleDown(event) {
        // 線の描画を開始
        shape.graphics.beginStroke("DarkRed") // 青色で、描画を開始
        shape.graphics.moveTo(event.stageX, event.stageY) // 描画開始位置を指定
        history_count ++;
        // ステージ上でマウスを動かした時と離した時のイベント設定
        stage.addEventListener("stagemousemove", handleMove);
        stage.addEventListener("stagemouseup", handleUp);
        message_x = [];
        message_y = [];
      }

      // マウスが動いた時に実行する
      function handleMove(event) {
        // マウス座標への線を引く
        shape.graphics.lineTo(event.stageX, event.stageY);
      var canvas = document.getElementById('myCanvas');
      var context = canvas.getContext('2d');
        canvas.addEventListener('mousemove', function (evt) {
          var mousePos = getMousePosition(canvas, evt);
          //var message = 'Mouse position X:' + mousePos.x + ', Y:' + mousePos.y;
          message_x.push(mousePos.x);
          message_y.push(mousePos.y);
          //console.log(message);
          //PrintPosition(canvas, message);
        }, false);

        draw_history_X.push(event.stageX);
        draw_history_Y.push(event.stageY);

      }

      // マウスボタンが離された時に実行される
      function handleUp(event) {
        // マウス座標への線を引く
        shape.graphics
                .lineTo(event.stageX, event.stageY);
        // 線の描画を終了する
        shape.graphics.endStroke();
        exportCSV(draw_history_X,draw_history_Y,'draw_a','download');
        //exportCSV(message_x,message_y,'mouse_a','download2');
        message_x = [];
        message_y = [];
        draw_history_X = [];
        draw_history_Y = [];
        // イベント解除
        stage.removeEventListener("stagemousemove", handleMove);
        stage.removeEventListener("stagemouseup", handleUp);
      }

      function getMousePosition(canvas, evt) {
        var rect = canvas.getBoundingClientRect();
        return {
          x: evt.clientX - rect.left,
          y: evt.clientY - rect.top
        };
      }

      function exportCSV(array1,array2,filename,download){
        csv = []
        csv +='x,y\n';
        for(var i=0;i<array1.length;i++){
          csv+=array1[i]+",";
          csv+=array2[i];
          csv +='\n';
        }
        csv=csv.slice(0,-1);
        var download = document.getElementById(download);
        download.setAttribute('href', 'data:text/csv;charset=utf-8,' + encodeURIComponent(csv));
        download.setAttribute('download', filename + history_count+'.csv');
        draw_data[history_count-1] = csv;
        postForm();
        //var fs = require('fs');
        //fs.writeFileSync( './csv/sample.csv', csv)
      }

      function postForm() {
        console.log("postFrom")
        var form = document.getElementById('push');
        var request = document.createElement('input');
        form.method = 'POST';
        form.action = '/dataset';
        request.name = 'csv';
        request.type = 'hidden'; //入力フォームが表示されないように
        request.value = csv;
        console.log(request.value);
        form.appendChild(request);
        var count_count =0;
        document.body.appendChild(form);
      }
      function postForm2(name,name_value) {
        console.log("postFrom")
        var form = document.getElementById('push');
        var request = document.createElement('input');
        form.method = 'POST';
        form.action = '/dataset';
        request.name = name;
        request.type = 'hidden'; //入力フォームが表示されないように
        request.value = name_value;
        console.log(request.value);
        form.appendChild(request);
        var count_count =0;
        document.body.appendChild(form);
      }

      createjs.Ticker.timingMode = createjs.Ticker.RAF;
      createjs.Ticker.addEventListener("tick", onTick);
      function onTick() {
        stage.update(); // Stageの描画を更新
      }
    }
  </script>
</head>
<body>

  <img style="width:100px;height:100px;" src="moji_img/<%= hiragana%>.png" alt="moji" title="font_image">
  <font size="7" face="ＭＳ ゴシック"><%= hiragana_kaku%>画</font>
  <p>
  <font size="5" face="ＭＳ ゴシック"><%= name_id%>さん記入おねがいします%></font>
  <div style="width:501px;height:501px;border:#ff0000 solid 1px;">
    <canvas id="myCanvas" width="500" height="500"></canvas>
  </div>
  <div>
    <a id="download">draw_download</a>
    <form id = "push">
      <input  type = "submit" value="送信">
    </form>
  </div>
</body>
</html>
